
Traditional S/w dev approach 
--

  Analysis 
    Design 
      [Development
        Testing]
          Deployment 
            Maintanance 

  Project: Calc App 
  Resources: FRD, HLD, LLD 

  [Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA Passed)] => Deployment 

  ---
  Development
  ---
    function add(a, b){
      return a + b;
    }

    add(10, 20); // 30

  QA 
  --
    Resource: Test Cases 
      Example Test Case #1: add should take in numbers as inputs [BUG]
      Example Test Case #2: add should always return number as output [BUG]
      Example Test case #3: add button should be disabled if invalid inputs are entered  [BUG]

    add(5, 2); // 7 
    add("5", 5); // "55" (bug)
    add("ABC", "xyz"); // "ABCxyz" (bug)


  Bug Fix
  --
    function add(a, b){
      if(typeof a == number && typeof b == number){
        return a + b;
      }
    }


Automated Testing
--
  0. Static Type Checking 
      * checking the datatype of variables, params, return type 
      Tools: PropTypes / Typescript / FlowJS

  1. Unit Testing 
      * testing tiny independent unit of your code 
      * Testing small unit of a component 
      * Individual units/components tested 
      * Bug Reduction Density => 40% - 80% 

      Tools: JEST & React Testing Library (RTL) vs JEST & Enzyme (jQuery like tool - for dom traversal)

  2. Integration Testing 
      * different units, modules or components are tested as combined entity 
      * Behavior of the app is tested 
      * to expose issues in the integrations between multiple units 
      * Usually done with mounting of rendering component 
      * Examples: testing if a child component can update context data in a parent comp 

      Tools: JEST & React Testing Library (RTL) vs JEST & Enzyme (jQuery like tool - for dom traversal)

  3. End to End testing 
      * testing the whole app 
      * tests are done in simulated browser 
      Example: testing an authentication flow 

      Tools: CypressJS, Protractor, Selenium 


Modern S/W Dev Methodology 
---
  Test Driven Development (TDD) or Behaviour Driven Development(BDD)
  --
    Dev Write test cases => Dev write the functionality => (Tools) => Instant feedback of success/failure 

  ---
  Development
  ---

    Resource: Test Cases 
      Example Test Case #1: add should take in numbers as inputs
      Example Test Case #2: add should always return number as output 
      Example Test case #3: add button should be disabled if invalid inputs are entered  

    function add(a, b){
      if(typeof a == number && typeof b == number){
        return a + b;
      }
    }

    add(10, 20); // 30

   
---

Test Driven Development (TDD) 
----
  * is a programming practice that instructs the dev's to write the new code only if automated test has failed 
  dev's write test cases => (instant feedback of failure) => dev's write functionality => (instant feedback of success) => [CODE COMPLETE ]

  Tools: JEST 
  Testing Pattern: AAA (Arrange, Act, Assert)


Behaviour Driven Development(BDD)
---- 
  * app is documented and designed around the Behavior the end user expects to experience in the app 
  dev's write test cases => (instant feedback of failure) => dev's write functionality => (instant feedback of success) => [CODE COMPLETE ]

  Tools: Jasmine JS 
  Testing Pattern: Given/When/Then  


Quick Intro about the Tools 
---
  JEST 
    * Framework and also a test runner 


// How to write test cases?
// Where to write test cases?
// How to test our app against the test cases we identified? 
